// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// App is an autogenerated mock type for the App type
type App struct {
	mock.Mock
}

// Banner provides a mock function with given fields: ctx, slotID, groupID
func (_m *App) Banner(ctx context.Context, slotID int, groupID int) (int, error) {
	ret := _m.Called(ctx, slotID, groupID)

	if len(ret) == 0 {
		panic("no return value specified for Banner")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int) (int, error)); ok {
		return rf(ctx, slotID, groupID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int) int); ok {
		r0 = rf(ctx, slotID, groupID)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int) error); ok {
		r1 = rf(ctx, slotID, groupID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BannerOff provides a mock function with given fields: ctx, slotID, bannerID
func (_m *App) BannerOff(ctx context.Context, slotID int, bannerID int) error {
	ret := _m.Called(ctx, slotID, bannerID)

	if len(ret) == 0 {
		panic("no return value specified for BannerOff")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int) error); ok {
		r0 = rf(ctx, slotID, bannerID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BannerOn provides a mock function with given fields: ctx, slotID, bannerID
func (_m *App) BannerOn(ctx context.Context, slotID int, bannerID int) error {
	ret := _m.Called(ctx, slotID, bannerID)

	if len(ret) == 0 {
		panic("no return value specified for BannerOn")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int) error); ok {
		r0 = rf(ctx, slotID, bannerID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Click provides a mock function with given fields: ctx, slotID, bannerID, groupID
func (_m *App) Click(ctx context.Context, slotID int, bannerID int, groupID int) error {
	ret := _m.Called(ctx, slotID, bannerID, groupID)

	if len(ret) == 0 {
		panic("no return value specified for Click")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int, int) error); ok {
		r0 = rf(ctx, slotID, bannerID, groupID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewApp creates a new instance of App. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewApp(t interface {
	mock.TestingT
	Cleanup(func())
}) *App {
	mock := &App{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
