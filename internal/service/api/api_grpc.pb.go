// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.1
// source: api.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	BannerRotation_AddBanner_FullMethodName    = "/banner.BannerRotation/AddBanner"
	BannerRotation_RemoveBanner_FullMethodName = "/banner.BannerRotation/RemoveBanner"
	BannerRotation_Find_FullMethodName         = "/banner.BannerRotation/Find"
	BannerRotation_Success_FullMethodName      = "/banner.BannerRotation/Success"
)

// BannerRotationClient is the client API for BannerRotation service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BannerRotationClient interface {
	AddBanner(ctx context.Context, in *SlotConfigRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RemoveBanner(ctx context.Context, in *SlotConfigRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Find(ctx context.Context, in *BannerRequest, opts ...grpc.CallOption) (*BannerResponse, error)
	Success(ctx context.Context, in *SuccessRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type bannerRotationClient struct {
	cc grpc.ClientConnInterface
}

func NewBannerRotationClient(cc grpc.ClientConnInterface) BannerRotationClient {
	return &bannerRotationClient{cc}
}

func (c *bannerRotationClient) AddBanner(ctx context.Context, in *SlotConfigRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, BannerRotation_AddBanner_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bannerRotationClient) RemoveBanner(ctx context.Context, in *SlotConfigRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, BannerRotation_RemoveBanner_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bannerRotationClient) Find(ctx context.Context, in *BannerRequest, opts ...grpc.CallOption) (*BannerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BannerResponse)
	err := c.cc.Invoke(ctx, BannerRotation_Find_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bannerRotationClient) Success(ctx context.Context, in *SuccessRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, BannerRotation_Success_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BannerRotationServer is the server API for BannerRotation service.
// All implementations must embed UnimplementedBannerRotationServer
// for forward compatibility
type BannerRotationServer interface {
	AddBanner(context.Context, *SlotConfigRequest) (*emptypb.Empty, error)
	RemoveBanner(context.Context, *SlotConfigRequest) (*emptypb.Empty, error)
	Find(context.Context, *BannerRequest) (*BannerResponse, error)
	Success(context.Context, *SuccessRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedBannerRotationServer()
}

// UnimplementedBannerRotationServer must be embedded to have forward compatible implementations.
type UnimplementedBannerRotationServer struct {
}

func (UnimplementedBannerRotationServer) AddBanner(context.Context, *SlotConfigRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBanner not implemented")
}
func (UnimplementedBannerRotationServer) RemoveBanner(context.Context, *SlotConfigRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveBanner not implemented")
}
func (UnimplementedBannerRotationServer) Find(context.Context, *BannerRequest) (*BannerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Find not implemented")
}
func (UnimplementedBannerRotationServer) Success(context.Context, *SuccessRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Success not implemented")
}
func (UnimplementedBannerRotationServer) mustEmbedUnimplementedBannerRotationServer() {}

// UnsafeBannerRotationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BannerRotationServer will
// result in compilation errors.
type UnsafeBannerRotationServer interface {
	mustEmbedUnimplementedBannerRotationServer()
}

func RegisterBannerRotationServer(s grpc.ServiceRegistrar, srv BannerRotationServer) {
	s.RegisterService(&BannerRotation_ServiceDesc, srv)
}

func _BannerRotation_AddBanner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SlotConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BannerRotationServer).AddBanner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BannerRotation_AddBanner_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BannerRotationServer).AddBanner(ctx, req.(*SlotConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BannerRotation_RemoveBanner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SlotConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BannerRotationServer).RemoveBanner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BannerRotation_RemoveBanner_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BannerRotationServer).RemoveBanner(ctx, req.(*SlotConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BannerRotation_Find_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BannerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BannerRotationServer).Find(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BannerRotation_Find_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BannerRotationServer).Find(ctx, req.(*BannerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BannerRotation_Success_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SuccessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BannerRotationServer).Success(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BannerRotation_Success_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BannerRotationServer).Success(ctx, req.(*SuccessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BannerRotation_ServiceDesc is the grpc.ServiceDesc for BannerRotation service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BannerRotation_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "banner.BannerRotation",
	HandlerType: (*BannerRotationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddBanner",
			Handler:    _BannerRotation_AddBanner_Handler,
		},
		{
			MethodName: "RemoveBanner",
			Handler:    _BannerRotation_RemoveBanner_Handler,
		},
		{
			MethodName: "Find",
			Handler:    _BannerRotation_Find_Handler,
		},
		{
			MethodName: "Success",
			Handler:    _BannerRotation_Success_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}
