// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	storage "github.com/trb1maker/gobannercircle/internal/storage"
)

// Storage is an autogenerated mock type for the Storage type
type Storage struct {
	mock.Mock
}

// BannerOff provides a mock function with given fields: ctx, slotID, bannerID
func (_m *Storage) BannerOff(ctx context.Context, slotID int, bannerID int) error {
	ret := _m.Called(ctx, slotID, bannerID)

	if len(ret) == 0 {
		panic("no return value specified for BannerOff")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int) error); ok {
		r0 = rf(ctx, slotID, bannerID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BannerOn provides a mock function with given fields: ctx, slotID, bannerID
func (_m *Storage) BannerOn(ctx context.Context, slotID int, bannerID int) error {
	ret := _m.Called(ctx, slotID, bannerID)

	if len(ret) == 0 {
		panic("no return value specified for BannerOn")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int) error); ok {
		r0 = rf(ctx, slotID, bannerID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IncClickCount provides a mock function with given fields: ctx, slotID, bannerID, groupID
func (_m *Storage) IncClickCount(ctx context.Context, slotID int, bannerID int, groupID int) error {
	ret := _m.Called(ctx, slotID, bannerID, groupID)

	if len(ret) == 0 {
		panic("no return value specified for IncClickCount")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int, int) error); ok {
		r0 = rf(ctx, slotID, bannerID, groupID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IncViewCount provides a mock function with given fields: ctx, slotID, bannerID, groupID
func (_m *Storage) IncViewCount(ctx context.Context, slotID int, bannerID int, groupID int) error {
	ret := _m.Called(ctx, slotID, bannerID, groupID)

	if len(ret) == 0 {
		panic("no return value specified for IncViewCount")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int, int) error); ok {
		r0 = rf(ctx, slotID, bannerID, groupID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Stats provides a mock function with given fields: ctx, slotID, groupID
func (_m *Storage) Stats(ctx context.Context, slotID int, groupID int) (storage.Stats, error) {
	ret := _m.Called(ctx, slotID, groupID)

	if len(ret) == 0 {
		panic("no return value specified for Stats")
	}

	var r0 storage.Stats
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int) (storage.Stats, error)); ok {
		return rf(ctx, slotID, groupID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int) storage.Stats); ok {
		r0 = rf(ctx, slotID, groupID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(storage.Stats)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int) error); ok {
		r1 = rf(ctx, slotID, groupID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewStorage creates a new instance of Storage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *Storage {
	mock := &Storage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
